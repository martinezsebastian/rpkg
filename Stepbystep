Step by step



# Include data
Place raw dataset in the raw-data folder
Manipulate data

run 
    usethis::use_data(datafile, overwrite = TRUE)

Write documentation in a new file, call it data.R, store it in the "R" folder
We need to do this because the data file does not have a place for us to write the documentation, so we have to do it separately
Then we run:
    devtools::document()
so that we can load the documentation
Â¿This runs roxygen2?

The last line has the name of the dataset


# Creating a function
Make a function file
save the function

run
    sinew::makeOxyFile("R/functionname.R")

This reads the function and creates an oxy_functionname.R file which contains the original function and the template for the documentation. Copy the contents from this oxy_functionname.R into functionname.R, and fill out what's necessary



Final stage:
run
    devtools::document()

Install and Restart
Check (Locally)
Add, Commit, Push
Check with Travis

Add travis badge to the top of the Readme to signal to people that the build is working as intended. 

We can do something similar with appveyor to test the package with Windows.
Remember to use the usethis::appveyor() command to add the app veyor .yml file

In order to submit to CRAN, you need to submit the evidence that your program passed the Windows test:
run
    devtools::


Vignettes
A Vignette is a story of how I use my package


Build tests for the packages
Code coverage shows how much of each function is covered by tests defined by the author of the package

Run
    usethis::use_testthat()

Write test
Save test in testthat folder
